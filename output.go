package codegen

import (
	"bytes"
	"fmt"
	"go/parser"
	"go/printer"
	"go/token"
	"io"
	"io/ioutil"
	"path"
	"sort"
)

func Output(ctx *Context, filePath string) error {
	var (
		unformatted bytes.Buffer
		out         bytes.Buffer
	)

	fmt.Fprint(&unformatted, "// Code generated by go-codegen; DO NOT EDIT.\n\n")
	fmt.Fprintf(&unformatted, "package %s\n", ctx.PackageName)
	outputImports(ctx, &unformatted)
	outputResults(ctx, &unformatted)

	// Parsing and printing ensures formatting.
	fset := token.NewFileSet()
	file, err := parser.ParseFile(fset, filePath, unformatted.Bytes(), parser.ParseComments)
	if err != nil {
		return err
	}
	printer.Fprint(&out, fset, file)

	op := path.Join(ctx.Dir, filePath)
	return ioutil.WriteFile(op, out.Bytes(), 0644)
}

func outputImports(ctx *Context, w io.Writer) {
	if len(ctx.Imports) == 0 {
		return
	}

	fmt.Fprint(w, "import (\n")

	imports := make([]string, len(ctx.Imports))
	i := 0
	for k := range ctx.Imports {
		imports[i] = k
		i++
	}
	sort.Strings(imports)

	for _, i := range imports {
		fmt.Fprintf(w, "\t\"%s\"\n", i)
	}
	fmt.Fprint(w, ")\n")

}

func outputResults(ctx *Context, w io.Writer) {
	resultKeys := make([]string, len(ctx.Results))
	i := 0
	for k := range ctx.Results {
		resultKeys[i] = k
		i++
	}
	sort.Strings(resultKeys)

	for _, k := range resultKeys {
		fmt.Fprintln(w, ctx.Results[k])
	}
}
